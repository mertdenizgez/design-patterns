= Dependency Injection Principle

Tayyip Mert Denizgez 160201036 Regular Education

== What is SOLID?

The purpose of the SOLID pattern, consisting of 5 fundamental principles, is to create the most compatible system for future changes and additions to the written program.
When a feature is added or removed later in the program, it allows these operations to take place without significantly affecting the structure of the program.

These 5 fundamental principles are:

** S - Single Responsibility Principle
** O - Open-Closed Principle
** L - Liskov-Substitution Principle
** I - Interface Segregation Principle
** D - Dependency Inversion Principle

== What is Dependency Inversion Principle?

At its core, the dependency inversion principle aims to reduce the dependency between classes.
In other words, it aims to create objects in a loosely-coupled manner.

There are two fundamental rules in this principle:

** High-level classes should not be dependent on low-level classes.
Both should depend on abstractions.
** Abstraction should not depend on details.
Details should depend on abstractions.

In summary, with dependency inversion, we can increase modularity in the code.
Additionally, when a feature similar to an existing one is added or when one of the existing features is removed, there is no need to make any changes to other features.

Dependency inversion increases testability, code reusability, and maintainability.

== Compiler

In this project, the dependency inversion principle is explained through an example of a compiler.
First of all, the compile function, which should be present in every language, is added to the ICompiler interface, creating an obligation for every class implementing this interface.

[code,java]
....
public interface ICompiler {
    public void compile(String code , String compiler);
}
....

Then, the compilers for different languages, which will be added as modules, are required to implement this class.

[code,java]
....
public class CCompiler extends IDE implements ICompiler { // <1>

    public void compile(String code, String compiler){
        System.out.println("This code: " + getCodeLine(code) + " compiled using " + compiler + ".");
    }

    public String getCodeLine(String code){ // <2>
        codeLine = "printf('" + code + "')";
        return codeLine;
    }
}
....

<1> As seen in line number 1, the ICompiler library is implemented, but we also see that it extends the IDE abstract class.
The reason for this is that in the designed system, the written code is modified according to the languages.
At the same time, when looking at this line, we can see how multiple inheritance works in JAVA.
<2> As seen in line number 2, this method is a function that must be overridden by every class that extends the IDE class.

[code,java]
....
public abstract class IDE {
    protected String codeLine;
    public abstract String getCodeLine(String code); // <1>
}
....

<1> A function that must be overridden

[code,java]
....
public class Application {

    private ICompiler compiler; // <1>

    public Application(ICompiler obj){ // <2>
        this.compiler = obj;
    }

    public void compile(String code, String compiler){ // <3>
        this.compiler.compile(code, compiler);
    }

    public static void main(String[] args) {

        Application obj1 = new Application(new CCompiler());
        obj1.compile("Hello World","gcc"); // <4>

        Application obj2 = new Application(new JavaCompiler());
        obj2.compile("Hello World","javac");

        Application obj3 = new Application(new CSharpCompiler());
        obj3.compile("Hello World","C# Compiler");
    }
}
....

<1> A reference is defined for the object to be created.
It is important to note that the reference type is an interface.
Thanks to polymorphism, any object from a class that implements this interface can be sent to this reference.
<2> As seen in line number 2, the constructor method of the Application class takes an object of type ICompiler interface, filling in the reference specified in line 1.
<3> With the method in line number 3, the object created is able to perform the necessary function without knowing the method that will work in the background.
<4> Looking at line number 4, we can see the situation mentioned in item 3. The compilation process is performed through the object created by the Application class without calling any method of the CCompiler class directly.

== UML Diagram of the Application

[plantuml,DependencyInjection,png]
....
Interface ICompiler{
    + void compile(String code , String compiler)
}

Abstract class IDE{
    # String codeLine;
    + {abstract} String getCodeLine(String code);
}

class CCompiler implements IDE, ICompiler{
}

class CSharpCompiler implements IDE, ICompiler{
}

class JavaCompiler implements IDE, ICompiler{
}

class Application{

    - ICompiler compiler;

    + Application(ICompiler obj)

    + void compile(String code, String compiler);

    + {static} void main(String[] args);
}

ICompiler *-- Application
....

